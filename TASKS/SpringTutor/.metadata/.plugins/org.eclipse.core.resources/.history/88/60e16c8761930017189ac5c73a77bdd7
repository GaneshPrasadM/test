package com.model;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URL;
import java.security.GeneralSecurityException;
import java.security.KeyStore;

import javax.net.ssl.KeyManager;
import javax.net.ssl.KeyManagerFactory;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
import javax.xml.namespace.QName;
import javax.xml.ws.BindingProvider;



@SuppressWarnings("restriction")
public class CertificateUtil
{
   
   public static void setupTLS(Object port) throws FileNotFoundException, IOException, GeneralSecurityException
   {
      try
      {         
         HTTPConduit httpConduit = (HTTPConduit) ClientProxy.getClient(port).getConduit();
         TLSClientParameters tlsCP = new TLSClientParameters();
         KeyStore keyStore = KeyStore.getInstance("JKS");
         final String keyStoreLoc = System.getProperty("jonas.base") + File.separator + "conf" + File.separator + "meerkat_ssl_conf" + File.separator + "certificate" + File.separator + "kpn.jks";
         final String password = "meerkat";
         keyStore.load(new FileInputStream(keyStoreLoc), password.toCharArray());
         KeyManager[] myKeyManagers = getKeyManagers(keyStore, password);
         tlsCP.setKeyManagers(myKeyManagers);
         KeyStore trustStore = KeyStore.getInstance("JKS");
         trustStore.load(new FileInputStream(keyStoreLoc), password.toCharArray());
         TrustManager[] myTrustStoreKeyManagers = getTrustManagersAllAccept(trustStore);
         tlsCP.setTrustManagers(myTrustStoreKeyManagers);

         HTTPClientPolicy httpClientPolicy = new HTTPClientPolicy();
         httpClientPolicy.setAllowChunking(false);
         httpClientPolicy.setContentType("text/xml");
         httpClientPolicy.setConnectionTimeout(120000);
         httpClientPolicy.setReceiveTimeout(120000);
         httpClientPolicy.setConnection(ConnectionType.KEEP_ALIVE);

         httpConduit.setClient(httpClientPolicy);
         tlsCP.setDisableCNCheck(false);

         httpConduit.setTlsClientParameters(tlsCP);
      }
      catch (Exception e)
      {
         LOGGER.error("KPN : Error in Certificate Util", e);
      }
   }

   private static TrustManager[] getTrustManagersAllAccept(KeyStore trustStore)
   {
      TrustManager[] acceptAll = new TrustManager[] { new X509TrustManager()
         {
            public java.security.cert.X509Certificate[] getAcceptedIssuers()
            {
               return null;
            }

            @Override
            public void checkClientTrusted(java.security.cert.X509Certificate[] chain, String authType) throws java.security.cert.CertificateException
            {
               // TODO Auto-generated method stub

            }

            @Override
            public void checkServerTrusted(java.security.cert.X509Certificate[] chain, String authType) throws java.security.cert.CertificateException
            {
               // TODO Auto-generated method stub

            }

         } };
      return acceptAll;

   }

   private static KeyManager[] getKeyManagers(KeyStore keyStore, String keyPassword) throws GeneralSecurityException, IOException
   {
      String alg = KeyManagerFactory.getDefaultAlgorithm();
      char[] keyPass = keyPassword != null ? keyPassword.toCharArray() : null;
      KeyManagerFactory fac = KeyManagerFactory.getInstance(alg);
      fac.init(keyStore, keyPass);
      return fac.getKeyManagers();
   }

   public static PCCheckPortType getPort(URL wsdlURL, QName SERVICE_NAME, String userName, String password, String endPointURL)
   {
      PCCheckPortType port = null;
      try
      {
         PCCheckService ss = new PCCheckService(wsdlURL, SERVICE_NAME);
         port = ss.getPCCheckServicePort();

         Client client = ClientProxy.getClient(port);
         Endpoint cxfEndpoint = client.getEndpoint();

         BindingProvider provider = (BindingProvider) port;
         provider.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, endPointURL);

         cxfEndpoint.getOutInterceptors().add(new LoggingOutInterceptor());
         cxfEndpoint.getInInterceptors().add(new LoggingInInterceptor());

         /************** KPN UserName & Password ***************/
         HTTPConduit httpConduit = (HTTPConduit) client.getConduit();

         AuthorizationPolicy authorizationPolicy = new AuthorizationPolicy();
         authorizationPolicy.setUserName(userName);
         authorizationPolicy.setPassword(password);
         authorizationPolicy.setAuthorizationType(CommonConstants.KPN_HTTP_AUTH);
         httpConduit.setAuthorization(authorizationPolicy);

         /************** KPN Client Policy close the port after request and response ***************/
         HTTPClientPolicy httpClientPolicy = new HTTPClientPolicy();
         httpClientPolicy.setAllowChunking(false);
         httpClientPolicy.setContentType("text/xml");
         httpClientPolicy.setConnection(ConnectionType.CLOSE);
         httpClientPolicy.setReceiveTimeout(20000);
         httpConduit.setClient(httpClientPolicy);
      }
      catch (Exception e)
      {
         LOGGER.error("KPN : Error in Certificate Util", e);
      }
      return port;
   }

}
